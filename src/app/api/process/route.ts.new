/**
 * API Route: /api/process
 * Processes content using real content processing API with robust fallbacks
 */
import { NextRequest, NextResponse } from 'next/server';
import { withAuth } from '@/middleware/auth';
import { withRateLimit } from '@/middleware/rate-limit';
import { validateProcessRequest } from '@/middleware/validation';
import { API } from '@/lib/api-module';
import { mockProcessContent } from '@/lib/mock-processor';
import { userDb, historyDb } from '@/lib/db';
import { ProcessRequest } from '@/types/api';
import jwt from 'jsonwebtoken';

// Configuration flags
const FORCE_REAL_AI = process.env.FORCE_REAL_AI === 'true';
const EMERGENCY_FALLBACK = process.env.EMERGENCY_FALLBACK === 'true';
// Always provide a fallback response if all else fails
const GUARANTEED_FALLBACK = true; // This ensures we never return an empty response

// Debug environment variables
const ENV_DEBUG = {
  NODE_ENV: process.env.NODE_ENV,
  HF_API_KEY_EXISTS: !!process.env.HUGGING_FACE_API_KEY,
  HF_API_KEY_LENGTH: process.env.HUGGING_FACE_API_KEY?.length || 0,
  HF_API_KEY_PREFIX: process.env.HUGGING_FACE_API_KEY?.substring(0, 5) || 'NONE',
  FORCE_REAL_AI,
  EMERGENCY_FALLBACK
};

// Log environment details when the module is loaded
console.log('========= API ROUTE ENVIRONMENT DEBUG =========');
console.log(JSON.stringify(ENV_DEBUG, null, 2));
console.log('=============================================');

/**
 * Helper function to provide a mock response when needed
 */
function provideMockResponse(id: string, reason: string) {
  console.log(`⚠️ Using mock response: ${reason}`);
  const mockResult = mockProcessContent({
    url: `https://example.com/${id}`,
    content: 'This is a fallback content for testing.',
    contentType: 'text',
    options: {
      maxSummaryLength: 100,
      keyQuotesCount: 3,
      socialPostCount: 1
    }
  });
  
  return NextResponse.json({
    success: true,
    result: mockResult,
    message: `Using mock data: ${reason}`,
    provider: 'mock'
  });
}

/**
 * Handle POST requests to /api/process
 */
export async function POST(req: NextRequest) {
  // Check for emergency fallback query parameter
  const url = new URL(req.url);
  const requestedFallback = url.searchParams.get('fallback') === 'true';
  
  // Only use immediate fallback if explicitly requested or if emergency fallback is enabled and we're in development
  // Otherwise, we'll try real AI first and fall back only if it fails
  const useImmediateFallback = requestedFallback || (EMERGENCY_FALLBACK && process.env.NODE_ENV === 'development');
  const useFallback = useImmediateFallback && !FORCE_REAL_AI;
  
  // If emergency fallback is enabled and real AI is not forced, bypass API calls but still try to use authentication
  if (useFallback) {
    console.log('⚠️ EMERGENCY FALLBACK MODE: Bypassing API calls but preserving authentication');
    
    try {
      // Generate a unique ID for this request
      const id = Math.random().toString(36).substring(2, 15);
      
      // Apply rate limiting
      return await withRateLimit(req, async (rateLimitedReq) => {
        // Apply authentication
        return await withAuth(rateLimitedReq, async (authenticatedReq, user) => {
          // Apply validation
          return await validateProcessRequest(authenticatedReq, async (validatedReq, data) => {
            console.log('Using mock processor for fallback mode');
            
            // Generate mock content
            const mockResult = mockProcessContent(data);
            
            // Save to history if user is authenticated
            if (user && user.id) {
              try {
                await historyDb.saveHistory({
                  userId: user.id,
                  url: data.url || '',
                  content: data.content || '',
                  contentType: data.contentType,
                  result: mockResult,
                  timestamp: new Date().toISOString()
                });
                console.log('✅ Saved to history');
              } catch (historyError) {
                console.error('Failed to save to history:', historyError);
              }
            }
            
            return NextResponse.json({
              success: true,
              result: mockResult,
              message: 'Using mock data (emergency fallback mode)',
              provider: 'mock'
            });
          });
        });
      });
    } catch (error) {
      console.error('Error in fallback mode:', error);
      return provideMockResponse('fallback-error', 'Error in fallback processing');
    }
  }
  
  // Normal processing path (not using immediate fallback)
  try {
    // Log the raw request body for debugging
    const rawBody = await req.clone().json();
    console.log('Process API - Raw request body:', JSON.stringify(rawBody, null, 2));
    
    // Step 1: Apply rate limiting
    return await withRateLimit(req, async (rateLimitedReq) => {
      // Step 2: Apply authentication
      return await withAuth(rateLimitedReq, async (authenticatedReq, user) => {
        console.log('Process API - Authenticated user:', {
          id: user.id,
          email: user.email,
          name: user.name
        });
        
        // Step 3: Validate the request data
        return await validateProcessRequest(authenticatedReq, async (validatedReq, data) => {
          console.log('Process API - Validated data:', JSON.stringify(data, null, 2));
          
          try {
            // Log API configuration for debugging
            console.log('========= PROCESSING REQUEST DEBUG =========');
            console.log('API Key status:', {
              exists: !!process.env.HUGGING_FACE_API_KEY,
              length: process.env.HUGGING_FACE_API_KEY?.length || 0
            });
            console.log('Force real AI:', FORCE_REAL_AI);
            console.log('Emergency fallback:', EMERGENCY_FALLBACK);
            console.log('============================================');
            
            // Progress callback for streaming updates (not implemented yet)
            const progressCallback = (progress: number, status: string) => {
              console.log(`Progress: ${progress}%, Status: ${status}`);
              // Future: implement streaming updates
            };
            
            try {
              // Log request information
              if (data.content) {
                console.log(`Processing ${data.contentType} content, length: ${data.content.length} chars`);
              } else if (data.url) {
                console.log(`Processing URL: ${data.url}`);
              } else {
                console.log('No content or URL provided');
              }
              
              // If forcing real AI, use only real AI processors
              if (FORCE_REAL_AI) {
                console.log('🔴 FORCE REAL AI MODE ENABLED: Using only real AI processors with strict enforcement');
                
                let result;
                try {
                  // Try Hugging Face first if available and enabled
                  if (process.env.HUGGING_FACE_API_KEY && process.env.DISABLE_HUGGINGFACE !== 'true') {
                    console.log('Using Hugging Face processor with API key');
                    
                    // Cast data options to expected type to fix TypeScript error
                    const processData: ProcessRequest = {
                      ...data,
                      options: data.options as ProcessRequest['options']
                    };
                    
                    // Process with Hugging Face
                    result = await API.processWithHuggingFace(processData, progressCallback);
                    console.log('✅ Successfully generated content with Hugging Face');
                  } 
                  // Try OpenAI if no Hugging Face or it's disabled
                  else if (process.env.OPENAI_API_KEY && process.env.DISABLE_OPENAI !== 'true') {
                    console.log('Using OpenAI processor with API key');
                    
                    // Cast data options to expected type to fix TypeScript error
                    const processData: ProcessRequest = {
                      ...data,
                      options: data.options as ProcessRequest['options']
                    };
                    
                    // OpenAI processing is now handled through the API module
                    throw new Error('OpenAI processing is not implemented in the new API module');
                  }
                  // Try Ollama if enabled
                  else if (process.env.USE_OLLAMA === 'true') {
                    console.log('Using Ollama processor');
                    
                    // Cast data options to expected type to fix TypeScript error
                    const processData: ProcessRequest = {
                      ...data,
                      options: data.options as ProcessRequest['options']
                    };
                    
                    // Process with Ollama
                    result = await API.processWithOllama(processData, progressCallback);
                    console.log('✅ Successfully generated content with Ollama');
                  }
                  // No available AI processors
                  else {
                    throw new Error('No AI processors available. Please configure API keys.');
                  }
                  
                  // Process the result
                  const processedResult = result;
                  
                  // Save to history if user is authenticated
                  if (user && user.id) {
                    try {
                      await historyDb.saveHistory({
                        userId: user.id,
                        url: data.url || '',
                        content: data.content || '',
                        contentType: data.contentType,
                        result: processedResult,
                        timestamp: new Date().toISOString()
                      });
                      console.log('✅ Saved to history');
                    } catch (historyError) {
                      console.error('Failed to save to history:', historyError);
                    }
                  }
                  
                  // Return the processed result
                  return NextResponse.json({
                    success: true,
                    result: processedResult,
                    message: 'Content processed successfully',
                    provider: processedResult.provider || 'unknown'
                  });
                } catch (processingError) {
                  console.error('❌ ALL AI PROCESSING FAILED:', processingError);
                  
                  // If emergency fallback is allowed, use mock processor
                  if (EMERGENCY_FALLBACK) {
                    console.log('⚠️ Using emergency fallback with mock processor');
                    return provideMockResponse(
                      data.url || 'content-' + Math.random().toString(36).substring(2, 7),
                      'All AI processing failed: ' + String(processingError)
                    );
                  } else {
                    // No fallback allowed, return error
                    return NextResponse.json({
                      success: false,
                      error: 'All AI processing failed and emergency fallback is disabled',
                      details: String(processingError)
                    }, { status: 500 });
                  }
                }
              } 
              // If not forcing real AI, follow normal processor selection logic
              else {
                console.log('Using standard processor selection logic');
                
                // Cast data options to expected type to fix TypeScript error
                const processData: ProcessRequest = {
                  ...data,
                  options: data.options as ProcessRequest['options']
                };
                
                // Try to process with available processors
                let result;
                try {
                  // Try Ollama first if enabled
                  if (process.env.USE_OLLAMA === 'true') {
                    console.log('Trying Ollama processor first');
                    try {
                      result = await API.processWithOllama(processData, progressCallback);
                      console.log('✅ Successfully generated content with Ollama');
                    } catch (ollamaError) {
                      console.error('Ollama processing failed, trying next option:', ollamaError);
                      throw ollamaError;
                    }
                  }
                  // Try Hugging Face if Ollama failed or not enabled
                  else if (process.env.HUGGING_FACE_API_KEY && process.env.DISABLE_HUGGINGFACE !== 'true') {
                    console.log('Trying Hugging Face processor');
                    try {
                      result = await API.processWithHuggingFace(processData, progressCallback);
                      console.log('✅ Successfully generated content with Hugging Face');
                    } catch (hfError) {
                      console.error('Hugging Face processing failed, trying next option:', hfError);
                      throw hfError;
                    }
                  }
                  // Try OpenRouter if previous options failed
                  else if (process.env.OPENROUTER_API_KEY && process.env.DISABLE_OPENROUTER !== 'true') {
                    console.log('Trying OpenRouter processor');
                    try {
                      result = await API.processWithOpenRouter(processData, progressCallback);
                      console.log('✅ Successfully generated content with OpenRouter');
                    } catch (orError) {
                      console.error('OpenRouter processing failed, trying next option:', orError);
                      throw orError;
                    }
                  }
                  // No available processors
                  else {
                    throw new Error('No AI processors available. Please configure API keys.');
                  }
                  
                  // Process the result
                  const processedResult = result;
                  
                  // Save to history if user is authenticated
                  if (user && user.id) {
                    try {
                      await historyDb.saveHistory({
                        userId: user.id,
                        url: data.url || '',
                        content: data.content || '',
                        contentType: data.contentType,
                        result: processedResult,
                        timestamp: new Date().toISOString()
                      });
                      console.log('✅ Saved to history');
                    } catch (historyError) {
                      console.error('Failed to save to history:', historyError);
                    }
                  }
                  
                  // Return the processed result
                  return NextResponse.json({
                    success: true,
                    result: processedResult,
                    message: 'Content processed successfully',
                    provider: processedResult.provider || 'unknown'
                  });
                } catch (processingError) {
                  console.error('❌ ALL AI PROCESSING FAILED:', processingError);
                  
                  // Use mock processor as fallback
                  console.log('⚠️ Using mock processor as fallback');
                  return provideMockResponse(
                    data.url || 'content-' + Math.random().toString(36).substring(2, 7),
                    'All AI processing failed: ' + String(processingError)
                  );
                }
              }
            } catch (error) {
              console.error('Processing error:', error);
              return NextResponse.json({
                success: false,
                error: 'Processing failed',
                details: String(error)
              }, { status: 500 });
            }
          } catch (error) {
            console.error('Unexpected error:', error);
            
            // If GUARANTEED_FALLBACK is enabled, always return a valid response
            if (GUARANTEED_FALLBACK) {
              return provideMockResponse(
                data?.url || 'error-' + Math.random().toString(36).substring(2, 7),
                'Unexpected server error, using fallback data'
              );
            }
            
            return NextResponse.json({
              success: false,
              error: 'An unexpected error occurred',
              details: String(error)
            }, { status: 500 });
          }
        });
      });
    });
  } catch (error) {
    console.error('Error processing content:', error);
    
    // If GUARANTEED_FALLBACK is enabled, always return a valid response
    if (GUARANTEED_FALLBACK) {
      return provideMockResponse('error', 'Unexpected server error, using fallback data');
    }
    
    return NextResponse.json({
      success: false,
      error: 'An unexpected error occurred',
      details: String(error)
    }, { status: 500 });
  }
}
