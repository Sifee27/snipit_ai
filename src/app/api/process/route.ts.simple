/**
 * API Route: /api/process
 * Processes content using Ollama or Hugging Face with robust fallbacks
 */
import { NextRequest, NextResponse } from 'next/server';
import { withAuth } from '@/middleware/auth';
import { withRateLimit } from '@/middleware/rate-limit';
import { validateProcessRequest } from '@/middleware/validation';
import { API } from '@/lib/api-module';
import { mockProcessContent } from '@/lib/mock-processor';
import { historyDb } from '@/lib/db';
import { ProcessRequest } from '@/types/api';

// Configuration flags
const FORCE_REAL_AI = process.env.FORCE_REAL_AI === 'true';
const EMERGENCY_FALLBACK = process.env.EMERGENCY_FALLBACK === 'true';
// Always provide a fallback response if all else fails
const GUARANTEED_FALLBACK = true; // This ensures we never return an empty response

/**
 * Helper function to provide a mock response when needed
 */
function provideMockResponse(id: string, reason: string) {
  console.log(`⚠️ Using mock response: ${reason}`);
  const mockResult = mockProcessContent({
    url: `https://example.com/${id}`,
    content: 'This is a fallback content for testing.',
    contentType: 'text',
    options: {
      maxSummaryLength: 100,
      includeKeyQuotes: true,
      includeSocialPost: true
    }
  });
  
  return NextResponse.json({
    success: true,
    result: mockResult,
    message: `Using mock data: ${reason}`,
    provider: 'mock'
  });
}

/**
 * Handle POST requests to /api/process
 */
export async function POST(req: NextRequest) {
  // Check for emergency fallback query parameter
  const url = new URL(req.url);
  const requestedFallback = url.searchParams.get('fallback') === 'true';
  
  // Only use immediate fallback if explicitly requested or if emergency fallback is enabled and we're in development
  // Otherwise, we'll try real AI first and fall back only if it fails
  const useImmediateFallback = requestedFallback || (EMERGENCY_FALLBACK && process.env.NODE_ENV === 'development');
  const useFallback = useImmediateFallback && !FORCE_REAL_AI;
  
  // If emergency fallback is enabled and real AI is not forced, bypass API calls but still try to use authentication
  if (useFallback) {
    console.log('⚠️ EMERGENCY FALLBACK MODE: Bypassing API calls but preserving authentication');
    
    try {
      // Generate a unique ID for this request
      const id = Math.random().toString(36).substring(2, 15);
      
      // Apply rate limiting
      return await withRateLimit(req, async (rateLimitedReq) => {
        // Apply authentication
        return await withAuth(rateLimitedReq, async (authenticatedReq, user) => {
          // Apply validation
          return await validateProcessRequest(authenticatedReq, async (validatedReq, data) => {
            console.log('Using mock processor for fallback mode');
            
            // Generate mock content
            const mockResult = mockProcessContent(data);
            
            // Save to history if user is authenticated
            if (user && user.id) {
              try {
                await historyDb.create({
                  userId: user.id,
                  url: data.url || '',
                  content: data.content || '',
                  contentType: data.contentType,
                  result: mockResult,
                  timestamp: new Date().toISOString()
                });
                console.log('✅ Saved to history');
              } catch (historyError) {
                console.error('Failed to save to history:', historyError);
              }
            }
            
            return NextResponse.json({
              success: true,
              result: mockResult,
              message: 'Using mock data (emergency fallback mode)',
              provider: 'mock'
            });
          });
        });
      });
    } catch (error) {
      console.error('Error in fallback mode:', error);
      return provideMockResponse('fallback-error', 'Error in fallback processing');
    }
  }
  
  // Normal processing path (not using immediate fallback)
  try {
    // Step 1: Apply rate limiting
    return await withRateLimit(req, async (rateLimitedReq) => {
      // Step 2: Apply authentication
      return await withAuth(rateLimitedReq, async (authenticatedReq, user) => {
        // Step 3: Validate the request data
        return await validateProcessRequest(authenticatedReq, async (validatedReq, data) => {
          try {
            // Progress callback for streaming updates (not implemented yet)
            const progressCallback = (progress: number, status: string) => {
              console.log(`Progress: ${progress}%, Status: ${status}`);
              // Future: implement streaming updates
            };
            
            try {
              // Process the content using the API module
              console.log('Processing content with API module');
              const result = await API.processContent(data, progressCallback);
              
              // Save to history if user is authenticated
              if (user && user.id) {
                try {
                  await historyDb.create({
                    userId: user.id,
                    url: data.url || '',
                    content: data.content || '',
                    contentType: data.contentType,
                    result: result,
                    timestamp: new Date().toISOString()
                  });
                  console.log('✅ Saved to history');
                } catch (historyError) {
                  console.error('Failed to save to history:', historyError);
                }
              }
              
              // Return the processed result
              return NextResponse.json({
                success: true,
                result: result,
                message: 'Content processed successfully',
                provider: result.aiProvider || 'unknown'
              });
            } catch (processingError) {
              console.error('❌ AI PROCESSING FAILED:', processingError);
              
              // Use mock processor as fallback
              console.log('⚠️ Using mock processor as fallback');
              return provideMockResponse(
                data.url || 'content-' + Math.random().toString(36).substring(2, 7),
                'AI processing failed: ' + String(processingError)
              );
            }
          } catch (error) {
            console.error('Unexpected error:', error);
            
            // If GUARANTEED_FALLBACK is enabled, always return a valid response
            if (GUARANTEED_FALLBACK) {
              return provideMockResponse(
                data?.url || 'error-' + Math.random().toString(36).substring(2, 7),
                'Unexpected server error, using fallback data'
              );
            }
            
            return NextResponse.json({
              success: false,
              error: 'An unexpected error occurred',
              details: String(error)
            }, { status: 500 });
          }
        });
      });
    });
  } catch (error) {
    console.error('Error processing content:', error);
    
    // If GUARANTEED_FALLBACK is enabled, always return a valid response
    if (GUARANTEED_FALLBACK) {
      return provideMockResponse('error', 'Unexpected server error, using fallback data');
    }
    
    return NextResponse.json({
      success: false,
      error: 'An unexpected error occurred',
      details: String(error)
    }, { status: 500 });
  }
}
