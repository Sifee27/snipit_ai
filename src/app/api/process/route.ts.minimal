import { NextRequest, NextResponse } from 'next/server';
import { withAuth } from '@/middleware/auth';
import { withRateLimit } from '@/middleware/rate-limit';
import { validateProcessRequest } from '@/middleware/validation';
import { API } from '@/lib/api-module';
import { mockProcessContent } from '@/lib/mock-processor';

// Configuration flags
const EMERGENCY_FALLBACK = process.env.EMERGENCY_FALLBACK === 'true';

/**
 * Helper function to provide a mock response when needed
 */
function provideMockResponse(id: string, reason: string) {
  console.log(`Using mock response: ${reason}`);
  const mockResult = mockProcessContent({
    url: `https://example.com/${id}`,
    content: 'This is a fallback content for testing.',
    contentType: 'text',
    options: {
      maxSummaryLength: 100,
      includeKeyQuotes: true,
      includeSocialPost: true
    }
  });
  
  return NextResponse.json({
    success: true,
    result: mockResult,
    message: `Using mock data: ${reason}`,
    provider: 'mock'
  });
}

/**
 * Handle POST requests to /api/process
 */
export async function POST(req: NextRequest) {
  try {
    // Step 1: Apply rate limiting
    return await withRateLimit(req, async (rateLimitedReq) => {
      // Step 2: Apply authentication
      return await withAuth(rateLimitedReq, async (authenticatedReq, user) => {
        // Step 3: Validate the request data
        return await validateProcessRequest(authenticatedReq, async (validatedReq, data) => {
          try {
            // Process the content using the API module
            console.log('Processing content with API module');
            const result = await API.processContent(data);
            
            // Return the processed result
            return NextResponse.json({
              success: true,
              result: result,
              message: 'Content processed successfully',
              provider: result.aiProvider || 'unknown'
            });
          } catch (processingError) {
            console.error('AI PROCESSING FAILED:', processingError);
            
            // Use mock processor as fallback
            return provideMockResponse(
              data.url || 'content-' + Math.random().toString(36).substring(2, 7),
              'AI processing failed: ' + String(processingError)
            );
          }
        });
      });
    });
  } catch (error) {
    console.error('Error processing content:', error);
    
    // Always return a valid response
    return provideMockResponse('error', 'Unexpected server error, using fallback data');
  }
}
